-- Ultimate Premium UI Library for Roblox
local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Themes
local Themes = {
    Dark = {
        Background = Color3.fromRGB(18, 18, 22),
        Secondary = Color3.fromRGB(25, 25, 30),
        Tertiary = Color3.fromRGB(32, 32, 38),
        Quaternary = Color3.fromRGB(40, 40, 46),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(170, 170, 170),
        Accent = Color3.fromRGB(120, 100, 255),
        Success = Color3.fromRGB(100, 255, 100),
        Warning = Color3.fromRGB(255, 200, 100),
        Error = Color3.fromRGB(255, 100, 100)
    },
    Light = {
        Background = Color3.fromRGB(250, 250, 252),
        Secondary = Color3.fromRGB(242, 242, 245),
        Tertiary = Color3.fromRGB(235, 235, 240),
        Quaternary = Color3.fromRGB(225, 225, 230),
        Text = Color3.fromRGB(20, 20, 20),
        TextDark = Color3.fromRGB(100, 100, 100),
        Accent = Color3.fromRGB(80, 120, 255),
        Success = Color3.fromRGB(80, 200, 80),
        Warning = Color3.fromRGB(200, 150, 80),
        Error = Color3.fromRGB(200, 80, 80)
    },
    Midnight = {
        Background = Color3.fromRGB(10, 10, 15),
        Secondary = Color3.fromRGB(15, 15, 22),
        Tertiary = Color3.fromRGB(22, 22, 30),
        Quaternary = Color3.fromRGB(30, 30, 40),
        Text = Color3.fromRGB(220, 220, 255),
        TextDark = Color3.fromRGB(150, 150, 180),
        Accent = Color3.fromRGB(100, 100, 255),
        Success = Color3.fromRGB(100, 200, 150),
        Warning = Color3.fromRGB(200, 150, 100),
        Error = Color3.fromRGB(200, 100, 150)
    },
    Rose = {
        Background = Color3.fromRGB(25, 15, 20),
        Secondary = Color3.fromRGB(35, 20, 25),
        Tertiary = Color3.fromRGB(45, 25, 30),
        Quaternary = Color3.fromRGB(55, 30, 35),
        Text = Color3.fromRGB(255, 220, 220),
        TextDark = Color3.fromRGB(200, 150, 150),
        Accent = Color3.fromRGB(255, 100, 150),
        Success = Color3.fromRGB(150, 255, 150),
        Warning = Color3.fromRGB(255, 200, 150),
        Error = Color3.fromRGB(255, 150, 150)
    },
    Aqua = {
        Background = Color3.fromRGB(15, 20, 25),
        Secondary = Color3.fromRGB(20, 28, 35),
        Tertiary = Color3.fromRGB(25, 35, 45),
        Quaternary = Color3.fromRGB(30, 42, 55),
        Text = Color3.fromRGB(220, 240, 255),
        TextDark = Color3.fromRGB(150, 180, 200),
        Accent = Color3.fromRGB(100, 200, 255),
        Success = Color3.fromRGB(100, 255, 200),
        Warning = Color3.fromRGB(255, 220, 100),
        Error = Color3.fromRGB(255, 150, 200)
    },
    Neon = {
        Background = Color3.fromRGB(10, 10, 10),
        Secondary = Color3.fromRGB(20, 20, 20),
        Tertiary = Color3.fromRGB(30, 30, 30),
        Quaternary = Color3.fromRGB(40, 40, 40),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(200, 200, 200),
        Accent = Color3.fromRGB(255, 0, 255),
        Success = Color3.fromRGB(0, 255, 0),
        Warning = Color3.fromRGB(255, 255, 0),
        Error = Color3.fromRGB(255, 0, 0)
    },
    Ocean = {
        Background = Color3.fromRGB(10, 25, 35),
        Secondary = Color3.fromRGB(15, 35, 50),
        Tertiary = Color3.fromRGB(20, 45, 65),
        Quaternary = Color3.fromRGB(25, 55, 80),
        Text = Color3.fromRGB(200, 230, 255),
        TextDark = Color3.fromRGB(120, 170, 200),
        Accent = Color3.fromRGB(50, 150, 255),
        Success = Color3.fromRGB(50, 255, 150),
        Warning = Color3.fromRGB(255, 200, 50),
        Error = Color3.fromRGB(255, 100, 100)
    }
}

-- Utility Functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

local function Tween(instance, properties, duration, style)
    duration = duration or 0.3
    style = style or Enum.EasingStyle.Quart
    local tween = TweenService:Create(instance, TweenInfo.new(duration, style, Enum.EasingDirection.Out), properties)
    tween:Play()
    return tween
end

local function AddDraggability(frame, handle)
    local dragging, dragInput, dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Tween(frame, {
                Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            }, 0.1)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

local function CreateGlow(parent, color)
    local glow = Create("ImageLabel", {
        Name = "Glow",
        Parent = parent,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 30, 1, 30),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Image = "rbxassetid://5028857472",
        ImageColor3 = color,
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(24, 24, 276, 276),
        ZIndex = parent.ZIndex - 1
    })
    return glow
end

-- Window Class
local Window = {}
Window.__index = Window

function Library:CreateWindow(config)
    local self = setmetatable({}, Window)
    
    self.Title = config.Title or "Premium UI"
    self.Theme = Themes[config.Theme] or Themes.Dark
    self.AccentColor = config.AccentColor or self.Theme.Accent
    self.ToggleKey = config.ToggleKey or Enum.KeyCode.RightShift
    self.Tabs = {}
    self.CurrentTab = nil
    self.Minimized = false
    
    -- Create GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = "UltimatePremiumUI",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        DisplayOrder = 10
    })
    
    -- Blur Effect
    local Blur = Create("Frame", {
        Name = "BlurEffect",
        Parent = self.ScreenGui,
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.5,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = -1
    })
    
    -- Main Frame
    self.MainFrame = Create("Frame", {
        Name = "Main",
        Parent = self.ScreenGui,
        BackgroundColor3 = self.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -350, 0.5, -250),
        Size = UDim2.new(0, 700, 0, 500),
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = self.MainFrame
    })
    
    -- Gradient background
    local Gradient = Create("UIGradient", {
        Parent = self.MainFrame,
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
        },
        Rotation = 45
    })
    
    -- Add shadow and glow
    CreateGlow(self.MainFrame, self.AccentColor)
    
    -- Title Bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        Parent = self.MainFrame,
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 45)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = self.TitleBar
    })
    
    Create("Frame", {
        Parent = self.TitleBar,
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0)
    })
    
    -- Title with gradient
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        Parent = self.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = self.Title,
        TextColor3 = self.Theme.Text,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Control Buttons Container
    local Controls = Create("Frame", {
        Name = "Controls",
        Parent = self.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -100, 0.5, -12),
        Size = UDim2.new(0, 90, 0, 24)
    })
    
    -- Minimize Button
    local MinimizeButton = Create("TextButton", {
        Name = "Minimize",
        Parent = Controls,
        BackgroundColor3 = Color3.fromRGB(255, 200, 100),
        BackgroundTransparency = 0.8,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 24, 0, 24),
        Font = Enum.Font.Gotham,
        Text = "—",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = MinimizeButton
    })
    
    -- Maximize Button
    local MaximizeButton = Create("TextButton", {
        Name = "Maximize",
        Parent = Controls,
        BackgroundColor3 = Color3.fromRGB(100, 255, 100),
        BackgroundTransparency = 0.8,
        Position = UDim2.new(0, 30, 0, 0),
        Size = UDim2.new(0, 24, 0, 24),
        Font = Enum.Font.Gotham,
        Text = "□",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = MaximizeButton
    })
    
    -- Close Button
    local CloseButton = Create("TextButton", {
        Name = "Close",
        Parent = Controls,
        BackgroundColor3 = Color3.fromRGB(255, 100, 100),
        BackgroundTransparency = 0.8,
        Position = UDim2.new(0, 60, 0, 0),
        Size = UDim2.new(0, 24, 0, 24),
        Font = Enum.Font.Gotham,
        Text = "×",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = CloseButton
    })
    
    -- Button hover effects
    for _, button in pairs({MinimizeButton, MaximizeButton, CloseButton}) do
        button.MouseEnter:Connect(function()
            Tween(button, {BackgroundTransparency = 0}, 0.2)
        end)
        
        button.MouseLeave:Connect(function()
            Tween(button, {BackgroundTransparency = 0.8}, 0.2)
        end)
    end
    
    -- Button functions
    MinimizeButton.MouseButton1Click:Connect(function()
        self.Minimized = not self.Minimized
        if self.Minimized then
            Tween(self.MainFrame, {Size = UDim2.new(0, 700, 0, 45)}, 0.3)
        else
            Tween(self.MainFrame, {Size = UDim2.new(0, 700, 0, 500)}, 0.3)
        end
    end)
    
    MaximizeButton.MouseButton1Click:Connect(function()
        if self.MainFrame.Size == UDim2.new(0, 700, 0, 500) then
            Tween(self.MainFrame, {
                Size = UDim2.new(0, 900, 0, 600),
                Position = UDim2.new(0.5, -450, 0.5, -300)
            }, 0.3)
        else
            Tween(self.MainFrame, {
                Size = UDim2.new(0, 700, 0, 500),
                Position = UDim2.new(0.5, -350, 0.5, -250)
            }, 0.3)
        end
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        -- Closing animation
        Tween(self.MainFrame, {Size = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 1}, 0.3)
        wait(0.3)
        self:Destroy()
    end)
    
    -- Tab Container
    self.TabContainer = Create("ScrollingFrame", {
        Name = "TabContainer",
        Parent = self.MainFrame,
        BackgroundColor3 = self.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 45),
        Size = UDim2.new(0, 170, 1, -45),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = self.AccentColor,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    
    Create("UIListLayout", {
        Parent = self.TabContainer,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    Create("UIPadding", {
        Parent = self.TabContainer,
        PaddingTop = UDim.new(0, 8),
        PaddingLeft = UDim.new(0, 8),
        PaddingRight = UDim.new(0, 8)
    })
    
    -- Content Container
    self.ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = self.MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 170, 0, 45),
        Size = UDim2.new(1, -170, 1, -45)
    })
    
    AddDraggability(self.MainFrame, self.TitleBar)
    
    -- Toggle visibility
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == self.ToggleKey then
            self.MainFrame.Visible = not self.MainFrame.Visible
        end
    end)
    
    return self
end

function Window:CreateTab(name, icon)
    local Tab = {}
    Tab.Name = name
    Tab.Window = self
    Tab.Sections = {}
    
    -- Tab Button
    Tab.Button = Create("TextButton", {
        Name = name,
        Parent = self.TabContainer,
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -16, 0, 40),
        Font = Enum.Font.Gotham,
        Text = "",
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Tab.Button
    })
    
    -- Tab gradient
    local TabGradient = Create("UIGradient", {
        Parent = Tab.Button,
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 220, 220))
        },
        Rotation = 90
    })
    
    -- Tab content frame
    local TabContent = Create("Frame", {
        Name = "TabContent",
        Parent = Tab.Button,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    -- Tab icon (optional)
    if icon then
        Tab.Icon = Create("TextLabel", {
            Name = "Icon",
            Parent = TabContent,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, -10),
            Size = UDim2.new(0, 20, 0, 20),
            Font = Enum.Font.Gotham,
            Text = icon,
            TextColor3 = self.Theme.TextDark,
            TextSize = 18
        })
    end
    
    -- Tab label
    Tab.Label = Create("TextLabel", {
        Name = "Label",
        Parent = TabContent,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, icon and 35 or 15, 0, 0),
        Size = UDim2.new(1, icon and -40 or -20, 1, 0),
        Font = Enum.Font.GothamMedium,
        Text = name,
        TextColor3 = self.Theme.TextDark,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Selection indicator
    Tab.Indicator = Create("Frame", {
        Name = "Indicator",
        Parent = Tab.Button,
        BackgroundColor3 = self.AccentColor,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 3, 1, 0),
        Visible = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = Tab.Indicator
    })
    
    -- Tab Content
    Tab.Content = Create("ScrollingFrame", {
        Name = name,
        Parent = self.ContentContainer,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = self.AccentColor,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Visible = false
    })
    
    Create("UIListLayout", {
        Parent = Tab.Content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 12)
    })
    
    Create("UIPadding", {
        Parent = Tab.Content,
        PaddingTop = UDim.new(0, 12),
        PaddingLeft = UDim.new(0, 12),
        PaddingRight = UDim.new(0, 12)
    })
    
    -- Tab Button Click
    Tab.Button.MouseButton1Click:Connect(function()
        self:SelectTab(Tab)
    end)
    
    -- Hover effects
    Tab.Button.MouseEnter:Connect(function()
        if self.CurrentTab ~= Tab then
            Tween(Tab.Button, {BackgroundColor3 = self.Theme.Quaternary}, 0.2)
            Tween(Tab.Label, {TextColor3 = self.Theme.Text}, 0.2)
            if Tab.Icon then
                Tween(Tab.Icon, {TextColor3 = self.Theme.Text}, 0.2)
            end
        end
    end)
    
    Tab.Button.MouseLeave:Connect(function()
        if self.CurrentTab ~= Tab then
            Tween(Tab.Button, {BackgroundColor3 = self.Theme.Secondary}, 0.2)
            Tween(Tab.Label, {TextColor3 = self.Theme.TextDark}, 0.2)
            if Tab.Icon then
                Tween(Tab.Icon, {TextColor3 = self.Theme.TextDark}, 0.2)
            end
        end
    end)
    
    -- Auto-resize content
    Tab.Content:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        local layout = Tab.Content:FindFirstChildOfClass("UIListLayout")
        if layout then
            Tab.Content.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 24)
        end
    end)
    
    -- Section methods
    function Tab:CreateSection(name)
        local Section = {}
        Section.Name = name
        Section.Window = self.Window
        
        Section.Container = Create("Frame", {
            Name = name,
            Parent = Tab.Content,
            BackgroundColor3 = Section.Window.Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 45),
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 10),
            Parent = Section.Container
        })
        
        -- Section gradient
        Create("UIGradient", {
            Parent = Section.Container,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
            },
            Rotation = 45
        })
        
        Section.Header = Create("Frame", {
            Name = "Header",
            Parent = Section.Container,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 40)
        })
        
        Section.Title = Create("TextLabel", {
            Name = "Title",
            Parent = Section.Header,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 0),
            Size = UDim2.new(1, -30, 1, 0),
            Font = Enum.Font.GothamBold,
            Text = name,
            TextColor3 = Section.Window.Theme.Text,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        -- Section divider
        local Divider = Create("Frame", {
            Name = "Divider",
            Parent = Section.Header,
            BackgroundColor3 = Section.Window.AccentColor,
            BackgroundTransparency = 0.8,
            Position = UDim2.new(0, 15, 1, -2),
            Size = UDim2.new(1, -30, 0, 2)
        })
        
        Section.Content = Create("Frame", {
            Name = "Content",
            Parent = Section.Container,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 40),
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
        Create("UIListLayout", {
            Parent = Section.Content,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        Create("UIPadding", {
            Parent = Section.Content,
            PaddingLeft = UDim.new(0, 15),
            PaddingRight = UDim.new(0, 15),
            PaddingBottom = UDim.new(0, 15)
        })
        
        -- Element creation methods
        function Section:CreateButton(config)
            local Button = Create("TextButton", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundColor3 = Section.Window.AccentColor,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Button
            })
            
            -- Button gradient
            local ButtonGradient = Create("UIGradient", {
                Parent = Button,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
                },
                Rotation = 90
            })
            
            -- Ripple effect
            Button.MouseButton1Click:Connect(function()
                if config.Callback then
                    config.Callback()
                end
                
                -- Ripple animation
                local Ripple = Create("Frame", {
                    Parent = Button,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0.6,
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(0.5, 0.5)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0.5, 0),
                    Parent = Ripple
                })
                
                local expand = Tween(Ripple, {
                    Size = UDim2.new(1.5, 0, 1.5, 0),
                    BackgroundTransparency = 1
                }, 0.5)
                
                expand.Completed:Connect(function()
                    Ripple:Destroy()
                end)
            end)
            
            Button.MouseEnter:Connect(function()
                Tween(Button, {BackgroundTransparency = 0.1}, 0.2)
                Tween(ButtonGradient, {Offset = Vector2.new(0, 0.1)}, 0.2)
            end)
            
            Button.MouseLeave:Connect(function()
                Tween(Button, {BackgroundTransparency = 0}, 0.2)
                Tween(ButtonGradient, {Offset = Vector2.new(0, 0)}, 0.2)
            end)
            
            return Button
        end
        
        function Section:CreateToggle(config)
            local Toggle = {}
            Toggle.Value = config.Default or false
            
            Toggle.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Toggle.Background = Create("Frame", {
                Name = "Background",
                Parent = Toggle.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Toggle.Background
            })
            
            Toggle.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Toggle.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            Toggle.Switch = Create("Frame", {
                Name = "Switch",
                Parent = Toggle.Container,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                Position = UDim2.new(1, -55, 0.5, -11),
                Size = UDim2.new(0, 44, 0, 22)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Toggle.Switch
            })
            
            Toggle.Knob = Create("Frame", {
                Name = "Knob",
                Parent = Toggle.Switch,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Toggle.Knob
            })
            
            -- Add shadow to knob
            Create("UIStroke", {
                Parent = Toggle.Knob,
                Color = Color3.fromRGB(0, 0, 0),
                Transparency = 0.9,
                Thickness = 1
            })
            
            local function UpdateToggle(instant)
                if Toggle.Value then
                    Tween(Toggle.Switch, {BackgroundColor3 = Section.Window.AccentColor}, instant and 0 or 0.2)
                    Tween(Toggle.Knob, {Position = UDim2.new(1, -20, 0.5, 0)}, instant and 0 or 0.2)
                else
                    Tween(Toggle.Switch, {BackgroundColor3 = Section.Window.Theme.Tertiary}, instant and 0 or 0.2)
                    Tween(Toggle.Knob, {Position = UDim2.new(0, 2, 0.5, 0)}, instant and 0 or 0.2)
                end
                
                if config.Callback then
                    config.Callback(Toggle.Value)
                end
            end
            
            Toggle.Container.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Toggle.Value = not Toggle.Value
                    UpdateToggle()
                end
            end)
            
            Toggle.Container.MouseEnter:Connect(function()
                Tween(Toggle.Background, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
            end)
            
            Toggle.Container.MouseLeave:Connect(function()
                Tween(Toggle.Background, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
            end)
            
            UpdateToggle(true)
            
            return Toggle
        end
        
        function Section:CreateSlider(config)
            local Slider = {}
            Slider.Value = config.Default or config.Min
            
            Slider.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 55)
            })
            
            Slider.Background = Create("Frame", {
                Name = "Background",
                Parent = Slider.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Slider.Background
            })
            
            Slider.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Slider.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -70, 0, 20),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            Slider.ValueLabel = Create("TextLabel", {
                Name = "Value",
                Parent = Slider.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -55, 0, 5),
                Size = UDim2.new(0, 50, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = tostring(Slider.Value),
                TextColor3 = Section.Window.AccentColor,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            Slider.SliderBG = Create("Frame", {
                Name = "SliderBG",
                Parent = Slider.Container,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(1, -30, 0, 8)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Slider.SliderBG
            })
            
            Slider.Fill = Create("Frame", {
                Name = "Fill",
                Parent = Slider.SliderBG,
                BackgroundColor3 = Section.Window.AccentColor,
                Size = UDim2.new(0, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Slider.Fill
            })
            
            -- Gradient on fill
            Create("UIGradient", {
                Parent = Slider.Fill,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
                },
                Rotation = 90
            })
            
            Slider.Knob = Create("Frame", {
                Name = "Knob",
                Parent = Slider.SliderBG,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, -10, 0.5, 0),
                Size = UDim2.new(0, 20, 0, 20),
                AnchorPoint = Vector2.new(0, 0.5),
                ZIndex = 2
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Slider.Knob
            })
            
            Create("UIStroke", {
                Parent = Slider.Knob,
                Color = Section.Window.AccentColor,
                Thickness = 3
            })
            
            local function UpdateSlider()
                local percent = (Slider.Value - config.Min) / (config.Max - config.Min)
                Slider.Fill.Size = UDim2.new(percent, 0, 1, 0)
                Slider.Knob.Position = UDim2.new(percent, -10, 0.5, 0)
                Slider.ValueLabel.Text = string.format(config.Format or "%d", Slider.Value)
                
                if config.Callback then
                    config.Callback(Slider.Value)
                end
            end
            
            local dragging = false
            
            Slider.SliderBG.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    Tween(Slider.Knob, {Size = UDim2.new(0, 24, 0, 24)}, 0.1)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    Tween(Slider.Knob, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = UserInputService:GetMouseLocation()
                    local relativePos = mousePos.X - Slider.SliderBG.AbsolutePosition.X
                    local percent = math.clamp(relativePos / Slider.SliderBG.AbsoluteSize.X, 0, 1)
                    
                    Slider.Value = config.Min + (config.Max - config.Min) * percent
                    
                    if config.Increment then
                        Slider.Value = math.floor(Slider.Value / config.Increment + 0.5) * config.Increment
                    end
                    
                    UpdateSlider()
                end
            end)
            
            UpdateSlider()
            
            return Slider
        end
        
        function Section:CreateDropdown(config)
            local Dropdown = {}
            Dropdown.Selected = config.Default or config.Options[1]
            Dropdown.Open = false
            
            Dropdown.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Dropdown.Button = Create("TextButton", {
                Name = "Button",
                Parent = Dropdown.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamMedium,
                Text = "",
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Dropdown.Button
            })
            
            Dropdown.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Dropdown.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name .. ": " .. Dropdown.Selected,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextTruncate = Enum.TextTruncate.AtEnd
            })
            
            Dropdown.Arrow = Create("TextLabel", {
                Name = "Arrow",
                Parent = Dropdown.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -35, 0.5, -8),
                Size = UDim2.new(0, 16, 0, 16),
                Font = Enum.Font.GothamBold,
                Text = "v",
                TextColor3 = Section.Window.Theme.TextDark,
                TextSize = 14
            })
            
            Dropdown.OptionContainer = Create("Frame", {
                Name = "Options",
                Parent = Dropdown.Container,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 43),
                Size = UDim2.new(1, 0, 0, 0),
                Visible = false,
                AutomaticSize = Enum.AutomaticSize.Y,
                ClipsDescendants = true
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Dropdown.OptionContainer
            })
            
            Create("UIListLayout", {
                Parent = Dropdown.OptionContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 3)
            })
            
            Create("UIPadding", {
                Parent = Dropdown.OptionContainer,
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5),
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5)
            })
            
            -- Search box (optional)
            if config.Search then
                Dropdown.SearchBox = Create("TextBox", {
                    Name = "Search",
                    Parent = Dropdown.OptionContainer,
                    BackgroundColor3 = Section.Window.Theme.Secondary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.Gotham,
                    PlaceholderText = "Search...",
                    PlaceholderColor3 = Section.Window.Theme.TextDark,
                    Text = "",
                    TextColor3 = Section.Window.Theme.Text,
                    TextSize = 13,
                    ClearTextOnFocus = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = Dropdown.SearchBox
                })
                
                Create("UIPadding", {
                    Parent = Dropdown.SearchBox,
                    PaddingLeft = UDim.new(0, 10)
                })
            end
            
            for _, option in ipairs(config.Options) do
                local OptionButton = Create("TextButton", {
                    Name = option,
                    Parent = Dropdown.OptionContainer,
                    BackgroundColor3 = Section.Window.Theme.Secondary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 32),
                    Font = Enum.Font.Gotham,
                    Text = option,
                    TextColor3 = Section.Window.Theme.Text,
                    TextSize = 13,
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = OptionButton
                })
                
                OptionButton.MouseButton1Click:Connect(function()
                    Dropdown.Selected = option
                    Dropdown.Label.Text = config.Name .. ": " .. option
                    Dropdown:Toggle()
                    
                    if config.Callback then
                        config.Callback(option)
                    end
                end)
                
                OptionButton.MouseEnter:Connect(function()
                    Tween(OptionButton, {BackgroundColor3 = Section.Window.AccentColor, BackgroundTransparency = 0.7}, 0.1)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    Tween(OptionButton, {BackgroundColor3 = Section.Window.Theme.Secondary, BackgroundTransparency = 0}, 0.1)
                end)
            end
            
            function Dropdown:Toggle()
                Dropdown.Open = not Dropdown.Open
                Dropdown.OptionContainer.Visible = Dropdown.Open
                
                Tween(Dropdown.Arrow, {Rotation = Dropdown.Open and 180 or 0}, 0.2)
                
                if Dropdown.Open then
                    Tween(Dropdown.Button, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
                else
                    Tween(Dropdown.Button, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
                end
            end
            
            Dropdown.Button.MouseButton1Click:Connect(function()
                Dropdown:Toggle()
            end)
            
            -- Search functionality
            if Dropdown.SearchBox then
                Dropdown.SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
                    local search = Dropdown.SearchBox.Text:lower()
                    for _, child in pairs(Dropdown.OptionContainer:GetChildren()) do
                        if child:IsA("TextButton") and child ~= Dropdown.SearchBox then
                            child.Visible = child.Text:lower():find(search, 1, true) ~= nil
                        end
                    end
                end)
            end
            
            return Dropdown
        end
        
        function Section:CreateInput(config)
            local Input = {}
            
            Input.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Input.Background = Create("Frame", {
                Name = "Background",
                Parent = Input.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Input.Background
            })
            
            Input.TextBox = Create("TextBox", {
                Name = "Input",
                Parent = Input.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.GothamMedium,
                PlaceholderText = config.PlaceholderText or config.Name,
                PlaceholderColor3 = Section.Window.Theme.TextDark,
                Text = config.Default or "",
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ClearTextOnFocus = config.ClearOnFocus ~= false
            })
            
            Input.TextBox.FocusLost:Connect(function(enterPressed)
                if config.Callback then
                    config.Callback(Input.TextBox.Text, enterPressed)
                end
            end)
            
            Input.TextBox.Focused:Connect(function()
                Tween(Input.Background, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
            end)
            
            Input.TextBox.FocusLost:Connect(function()
                Tween(Input.Background, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
            end)
            
            return Input
        end
        
        function Section:CreateLabel(text)
            local Label = Create("TextLabel", {
                Name = "Label",
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Section.Window.Theme.TextDark,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            return Label
        end
        
        function Section:CreateParagraph(title, content)
            local Paragraph = {}
            
            Paragraph.Container = Create("Frame", {
                Name = "Paragraph",
                Parent = Section.Content,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 0, 60),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Paragraph.Container
            })
            
            Create("UIPadding", {
                Parent = Paragraph.Container,
                PaddingTop = UDim.new(0, 10),
                PaddingBottom = UDim.new(0, 10),
                PaddingLeft = UDim.new(0, 15),
                PaddingRight = UDim.new(0, 15)
            })
            
            Paragraph.Title = Create("TextLabel", {
                Name = "Title",
                Parent = Paragraph.Container,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = title,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            Paragraph.Content = Create("TextLabel", {
                Name = "Content",
                Parent = Paragraph.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 0),
                Font = Enum.Font.Gotham,
                Text = content,
                TextColor3 = Section.Window.Theme.TextDark,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            return Paragraph
        end
        
        function Section:CreateColorPicker(config)
            local ColorPicker = {}
            ColorPicker.Color = config.Default or Color3.fromRGB(255, 255, 255)
            ColorPicker.Open = false
            
            ColorPicker.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            ColorPicker.Button = Create("Frame", {
                Name = "Button",
                Parent = ColorPicker.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = ColorPicker.Button
            })
            
            ColorPicker.Label = Create("TextLabel", {
                Name = "Label",
                Parent = ColorPicker.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -60, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            ColorPicker.Display = Create("Frame", {
                Name = "Display",
                Parent = ColorPicker.Button,
                BackgroundColor3 = ColorPicker.Color,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -40, 0.5, -12),
                Size = UDim2.new(0, 24, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = ColorPicker.Display
            })
            
            Create("UIStroke", {
                Parent = ColorPicker.Display,
                Color = Section.Window.Theme.Tertiary,
                Thickness = 2
            })
            
            ColorPicker.PickerFrame = Create("Frame", {
                Name = "Picker",
                Parent = ColorPicker.Container,
                BackgroundColor3 = Section.Window.Theme.Secondary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 43),
                Size = UDim2.new(1, 0, 0, 160),
                Visible = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = ColorPicker.PickerFrame
            })
            
            Create("UIPadding", {
                Parent = ColorPicker.PickerFrame,
                PaddingTop = UDim.new(0, 10),
                PaddingBottom = UDim.new(0, 10),
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10)
            })
            
            -- Simple RGB sliders
            local colors = {"R", "G", "B"}
            local sliders = {}
            
            for i, comp in ipairs(colors) do
                local SliderFrame = Create("Frame", {
                    Name = comp,
                    Parent = ColorPicker.PickerFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, (i-1) * 50),
                    Size = UDim2.new(1, 0, 0, 40)
                })
                
                local Label = Create("TextLabel", {
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 20, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = comp,
                    TextColor3 = Section.Window.Theme.Text,
                    TextSize = 14
                })
                
                local Value = Create("TextLabel", {
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -40, 0, 0),
                    Size = UDim2.new(0, 40, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = "255",
                    TextColor3 = Section.Window.Theme.TextDark,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local SliderBG = Create("Frame", {
                    Parent = SliderFrame,
                    BackgroundColor3 = Section.Window.Theme.Tertiary,
                    Position = UDim2.new(0, 25, 0, 8),
                    Size = UDim2.new(1, -70, 0, 4)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderBG
                })
                
                local Fill = Create("Frame", {
                    Parent = SliderBG,
                    BackgroundColor3 = comp == "R" and Color3.fromRGB(255, 0, 0) or comp == "G" and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 0, 255),
                    Size = UDim2.new(1, 0, 1, 0)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = Fill
                })
                
                sliders[comp] = {
                    value = Value,
                    fill = Fill,
                    bg = SliderBG
                }
            end
            
            local function UpdateColor()
                ColorPicker.Display.BackgroundColor3 = ColorPicker.Color
                if config.Callback then
                    config.Callback(ColorPicker.Color)
                end
            end
            
            ColorPicker.Button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    ColorPicker.Open = not ColorPicker.Open
                    ColorPicker.PickerFrame.Visible = ColorPicker.Open
                end
            end)
            
            UpdateColor()
            
            return ColorPicker
        end
        
        function Section:CreateKeybind(config)
            local Keybind = {}
            Keybind.Key = config.Default or Enum.KeyCode.F
            Keybind.Listening = false
            
            Keybind.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Keybind.Background = Create("Frame", {
                Name = "Background",
                Parent = Keybind.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Keybind.Background
            })
            
            Keybind.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Keybind.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -100, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            Keybind.Button = Create("TextButton", {
                Name = "Keybind",
                Parent = Keybind.Container,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -85, 0.5, -14),
                Size = UDim2.new(0, 70, 0, 28),
                Font = Enum.Font.GothamMedium,
                Text = Keybind.Key.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 13,
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Keybind.Button
            })
            
            Keybind.Button.MouseButton1Click:Connect(function()
                Keybind.Listening = true
                Keybind.Button.Text = "..."
                Tween(Keybind.Button, {BackgroundColor3 = Section.Window.AccentColor}, 0.2)
            end)
            
            UserInputService.InputBegan:Connect(function(input)
                if Keybind.Listening and input.UserInputType == Enum.UserInputType.Keyboard then
                    Keybind.Key = input.KeyCode
                    Keybind.Button.Text = Keybind.Key.Name
                    Keybind.Listening = false
                    Tween(Keybind.Button, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
                    
                    if config.Callback then
                        config.Callback(Keybind.Key)
                    end
                elseif not Keybind.Listening and input.KeyCode == Keybind.Key then
                    if config.Callback then
                        config.Callback(Keybind.Key)
                    end
                end
            end)
            
            return Keybind
        end
        
        function Section:CreateSeparator()
            local Separator = Create("Frame", {
                Name = "Separator",
                Parent = Section.Content,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 1)
            })
            
            return Separator
        end
        
        function Section:CreateMultiDropdown(config)
            local MultiDropdown = {}
            MultiDropdown.Selected = config.Default or {}
            MultiDropdown.Open = false
            MultiDropdown.Options = {}
            
            MultiDropdown.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            MultiDropdown.Button = Create("TextButton", {
                Name = "Button",
                Parent = MultiDropdown.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamMedium,
                Text = "",
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = MultiDropdown.Button
            })
            
            MultiDropdown.Label = Create("TextLabel", {
                Name = "Label",
                Parent = MultiDropdown.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name .. ": " .. (#MultiDropdown.Selected > 0 and table.concat(MultiDropdown.Selected, ", ") or "None"),
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextTruncate = Enum.TextTruncate.AtEnd
            })
            
            MultiDropdown.Arrow = Create("TextLabel", {
                Name = "Arrow",
                Parent = MultiDropdown.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -35, 0.5, -8),
                Size = UDim2.new(0, 16, 0, 16),
                Font = Enum.Font.GothamBold,
                Text = "v",
                TextColor3 = Section.Window.Theme.TextDark,
                TextSize = 14
            })
            
            MultiDropdown.OptionContainer = Create("Frame", {
                Name = "Options",
                Parent = MultiDropdown.Container,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 43),
                Size = UDim2.new(1, 0, 0, 0),
                Visible = false,
                AutomaticSize = Enum.AutomaticSize.Y,
                ClipsDescendants = true
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = MultiDropdown.OptionContainer
            })
            
            Create("UIListLayout", {
                Parent = MultiDropdown.OptionContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 3)
            })
            
            Create("UIPadding", {
                Parent = MultiDropdown.OptionContainer,
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5),
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5)
            })
            
            for _, option in ipairs(config.Options) do
                local OptionToggle = Create("TextButton", {
                    Name = option,
                    Parent = MultiDropdown.OptionContainer,
                    BackgroundColor3 = Section.Window.Theme.Secondary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 32),
                    Font = Enum.Font.Gotham,
                    Text = "",
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = OptionToggle
                })
                
                local OptionLabel = Create("TextLabel", {
                    Parent = OptionToggle,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -40, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = option,
                    TextColor3 = Section.Window.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local Checkmark = Create("TextLabel", {
                    Name = "Check",
                    Parent = OptionToggle,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -30, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16),
                    Font = Enum.Font.GothamBold,
                    Text = "✓",
                    TextColor3 = Section.Window.AccentColor,
                    TextSize = 16,
                    Visible = table.find(MultiDropdown.Selected, option) ~= nil
                })
                
                MultiDropdown.Options[option] = {button = OptionToggle, check = Checkmark}
                
                OptionToggle.MouseButton1Click:Connect(function()
                    local index = table.find(MultiDropdown.Selected, option)
                    if index then
                        table.remove(MultiDropdown.Selected, index)
                        Checkmark.Visible = false
                        Tween(OptionToggle, {BackgroundColor3 = Section.Window.Theme.Secondary}, 0.1)
                    else
                        table.insert(MultiDropdown.Selected, option)
                        Checkmark.Visible = true
                        Tween(OptionToggle, {BackgroundColor3 = Section.Window.AccentColor, BackgroundTransparency = 0.8}, 0.1)
                    end
                    
                    MultiDropdown.Label.Text = config.Name .. ": " .. (#MultiDropdown.Selected > 0 and table.concat(MultiDropdown.Selected, ", ") or "None")
                    
                    if config.Callback then
                        config.Callback(MultiDropdown.Selected)
                    end
                end)
                
                OptionToggle.MouseEnter:Connect(function()
                    if not table.find(MultiDropdown.Selected, option) then
                        Tween(OptionToggle, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.1)
                    end
                end)
                
                OptionToggle.MouseLeave:Connect(function()
                    if not table.find(MultiDropdown.Selected, option) then
                        Tween(OptionToggle, {BackgroundColor3 = Section.Window.Theme.Secondary}, 0.1)
                    end
                end)
                
                -- Update initial state
                if table.find(MultiDropdown.Selected, option) then
                    OptionToggle.BackgroundColor3 = Section.Window.AccentColor
                    OptionToggle.BackgroundTransparency = 0.8
                end
            end
            
            function MultiDropdown:Toggle()
                MultiDropdown.Open = not MultiDropdown.Open
                MultiDropdown.OptionContainer.Visible = MultiDropdown.Open
                
                Tween(MultiDropdown.Arrow, {Rotation = MultiDropdown.Open and 180 or 0}, 0.2)
                
                if MultiDropdown.Open then
                    Tween(MultiDropdown.Button, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
                else
                    Tween(MultiDropdown.Button, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
                end
            end
            
            MultiDropdown.Button.MouseButton1Click:Connect(function()
                MultiDropdown:Toggle()
            end)
            
            return MultiDropdown
        end
        
        table.insert(Tab.Sections, Section)
        return Section
    end
    
    table.insert(self.Tabs, Tab)
    
    -- Select first tab by default
    if #self.Tabs == 1 then
        self:SelectTab(Tab)
    end
    
    return Tab
end

function Window:SelectTab(tab)
    -- Hide all tabs
    for _, t in ipairs(self.Tabs) do
        t.Content.Visible = false
        t.Indicator.Visible = false
        Tween(t.Button, {BackgroundColor3 = self.Theme.Secondary}, 0.2)
        Tween(t.Label, {TextColor3 = self.Theme.TextDark}, 0.2)
        if t.Icon then
            Tween(t.Icon, {TextColor3 = self.Theme.TextDark}, 0.2)
        end
    end
    
    -- Show selected tab
    tab.Content.Visible = true
    tab.Indicator.Visible = true
    self.CurrentTab = tab
    Tween(tab.Button, {BackgroundColor3 = self.Theme.Quaternary}, 0.2)
    Tween(tab.Label, {TextColor3 = self.AccentColor}, 0.2)
    if tab.Icon then
        Tween(tab.Icon, {TextColor3 = self.AccentColor}, 0.2)
    end
end

function Window:SetTheme(themeName)
    local theme = Themes[themeName]
    if theme then
        self.Theme = theme
        -- Update all UI elements with new theme
        Tween(self.MainFrame, {BackgroundColor3 = theme.Background}, 0.3)
        Tween(self.TitleBar, {BackgroundColor3 = theme.Secondary}, 0.3)
        Tween(self.TabContainer, {BackgroundColor3 = theme.Tertiary}, 0.3)
        -- Update other elements...
    end
end

function Window:ToggleRainbow(enabled)
    if enabled then
        self.RainbowConnection = RunService.Heartbeat:Connect(function()
            local hue = tick() % 5 / 5
            local color = Color3.fromHSV(hue, 1, 1)
            self.AccentColor = color
            -- Update accent colored elements
        end)
    else
        if self.RainbowConnection then
            self.RainbowConnection:Disconnect()
        end
    end
end

function Window:SetAccentColor(color)
    self.AccentColor = color
    -- Update all accent colored elements
end

function Window:Reset()
    Tween(self.MainFrame, {
        Position = UDim2.new(0.5, -350, 0.5, -250),
        Size = UDim2.new(0, 700, 0, 500)
    }, 0.3)
end

function Window:Destroy()
    self.ScreenGui:Destroy()
end

function Window:Init()
    -- Opening animation
    self.MainFrame.Size = UDim2.new(0, 0, 0, 0)
    self.MainFrame.BackgroundTransparency = 1
    
    Tween(self.MainFrame, {
        Size = UDim2.new(0, 700, 0, 500),
        BackgroundTransparency = 0
    }, 0.5, Enum.EasingStyle.Back)
end

return Library
