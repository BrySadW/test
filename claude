-- Ultimate Premium UI Library v2.1 - Fully Fixed Edition
local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Enhanced Themes with complete color sets
local Themes = {
    Dark = {
        Name = "Dark",
        Background = Color3.fromRGB(22, 22, 26),
        Secondary = Color3.fromRGB(28, 28, 33),
        Tertiary = Color3.fromRGB(35, 35, 42),
        Quaternary = Color3.fromRGB(42, 42, 50),
        Border = Color3.fromRGB(50, 50, 58),
        Text = Color3.fromRGB(240, 240, 245),
        TextDark = Color3.fromRGB(160, 160, 170),
        TextLight = Color3.fromRGB(200, 200, 210),
        Accent = Color3.fromRGB(130, 110, 255),
        AccentDark = Color3.fromRGB(110, 90, 235),
        Success = Color3.fromRGB(100, 255, 130),
        Warning = Color3.fromRGB(255, 200, 100),
        Error = Color3.fromRGB(255, 100, 100),
        ScrollBar = Color3.fromRGB(80, 80, 90),
        Note = Color3.fromRGB(150, 130, 255)
    },
    Light = {
        Name = "Light",
        Background = Color3.fromRGB(252, 252, 253),
        Secondary = Color3.fromRGB(245, 245, 248),
        Tertiary = Color3.fromRGB(238, 238, 242),
        Quaternary = Color3.fromRGB(230, 230, 235),
        Border = Color3.fromRGB(220, 220, 225),
        Text = Color3.fromRGB(20, 20, 25),
        TextDark = Color3.fromRGB(80, 80, 90),
        TextLight = Color3.fromRGB(120, 120, 130),
        Accent = Color3.fromRGB(100, 120, 255),
        AccentDark = Color3.fromRGB(80, 100, 235),
        Success = Color3.fromRGB(80, 200, 100),
        Warning = Color3.fromRGB(200, 150, 80),
        Error = Color3.fromRGB(200, 80, 80),
        ScrollBar = Color3.fromRGB(200, 200, 210),
        Note = Color3.fromRGB(120, 140, 255)
    },
    Midnight = {
        Name = "Midnight",
        Background = Color3.fromRGB(10, 10, 18),
        Secondary = Color3.fromRGB(15, 15, 25),
        Tertiary = Color3.fromRGB(22, 22, 35),
        Quaternary = Color3.fromRGB(30, 30, 45),
        Border = Color3.fromRGB(40, 40, 55),
        Text = Color3.fromRGB(220, 220, 255),
        TextDark = Color3.fromRGB(140, 140, 180),
        TextLight = Color3.fromRGB(180, 180, 220),
        Accent = Color3.fromRGB(100, 100, 255),
        AccentDark = Color3.fromRGB(80, 80, 235),
        Success = Color3.fromRGB(100, 200, 180),
        Warning = Color3.fromRGB(200, 150, 100),
        Error = Color3.fromRGB(200, 100, 150),
        ScrollBar = Color3.fromRGB(60, 60, 90),
        Note = Color3.fromRGB(120, 120, 255)
    },
    Rose = {
        Name = "Rose",
        Background = Color3.fromRGB(28, 18, 23),
        Secondary = Color3.fromRGB(38, 23, 28),
        Tertiary = Color3.fromRGB(48, 28, 33),
        Quaternary = Color3.fromRGB(58, 33, 38),
        Border = Color3.fromRGB(68, 38, 43),
        Text = Color3.fromRGB(255, 230, 230),
        TextDark = Color3.fromRGB(200, 160, 160),
        TextLight = Color3.fromRGB(230, 190, 190),
        Accent = Color3.fromRGB(255, 110, 160),
        AccentDark = Color3.fromRGB(235, 90, 140),
        Success = Color3.fromRGB(150, 255, 180),
        Warning = Color3.fromRGB(255, 200, 150),
        Error = Color3.fromRGB(255, 150, 150),
        ScrollBar = Color3.fromRGB(100, 60, 70),
        Note = Color3.fromRGB(255, 130, 180)
    }
}

-- Store all UI elements that need theme updates
local ThemeElements = {}

-- Utility Functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

local function Tween(instance, properties, duration, style, direction)
    duration = duration or 0.3
    style = style or Enum.EasingStyle.Quart
    direction = direction or Enum.EasingDirection.Out
    local tween = TweenService:Create(
        instance, 
        TweenInfo.new(duration, style, direction), 
        properties
    )
    tween:Play()
    return tween
end

local function AddDraggability(frame, handle)
    local dragging, dragInput, dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Tween(frame, {
                Position = UDim2.new(
                    startPos.X.Scale, 
                    startPos.X.Offset + delta.X, 
                    startPos.Y.Scale, 
                    startPos.Y.Offset + delta.Y
                )
            }, 0.1)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Register element for theme updates
local function RegisterThemeElement(element, properties)
    table.insert(ThemeElements, {element = element, properties = properties})
end

-- Custom ScrollBar
local function CreateScrollBar(parent, theme)
    local ScrollBar = Create("Frame", {
        Name = "ScrollBar",
        Parent = parent,
        BackgroundColor3 = theme.ScrollBar,
        BackgroundTransparency = 0.7,
        Size = UDim2.new(0, 4, 1, 0),
        Position = UDim2.new(1, -6, 0, 0),
        Visible = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = ScrollBar
    })
    
    local ScrollThumb = Create("Frame", {
        Name = "Thumb",
        Parent = ScrollBar,
        BackgroundColor3 = theme.Accent,
        BackgroundTransparency = 0.3,
        Size = UDim2.new(1, 0, 0.3, 0),
        Position = UDim2.new(0, 0, 0, 0)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = ScrollThumb
    })
    
    RegisterThemeElement(ScrollBar, {BackgroundColor3 = "ScrollBar"})
    RegisterThemeElement(ScrollThumb, {BackgroundColor3 = "Accent"})
    
    return ScrollBar, ScrollThumb
end

-- Notification System
local NotificationHolder = nil
local Notifications = {}

local function CreateNotificationHolder()
    if NotificationHolder then return end
    
    NotificationHolder = Create("Frame", {
        Name = "NotificationHolder",
        Parent = CoreGui:FindFirstChild("UltimatePremiumUI") or CoreGui,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -320, 1, -20),
        Size = UDim2.new(0, 300, 1, -40),
        AnchorPoint = Vector2.new(0, 1)
    })
    
    Create("UIListLayout", {
        Parent = NotificationHolder,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        VerticalAlignment = Enum.VerticalAlignment.Bottom
    })
end

function Library:Notify(config)
    CreateNotificationHolder()
    
    local currentTheme = self.Theme or Themes.Dark
    
    local Notification = Create("Frame", {
        Parent = NotificationHolder,
        BackgroundColor3 = currentTheme.Secondary,
        Size = UDim2.new(1, 0, 0, 80),
        Position = UDim2.new(1, 100, 0, 0),
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Notification
    })
    
    -- Gradient
    Create("UIGradient", {
        Parent = Notification,
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
        },
        Rotation = 90
    })
    
    -- Accent bar
    local AccentBar = Create("Frame", {
        Parent = Notification,
        BackgroundColor3 = config.Color or currentTheme.Accent,
        Size = UDim2.new(0, 4, 1, 0)
    })
    
    local Title = Create("TextLabel", {
        Parent = Notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 10),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = config.Title or "Notification",
        TextColor3 = currentTheme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local Message = Create("TextLabel", {
        Parent = Notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 30),
        Size = UDim2.new(1, -20, 0, 25),
        Font = Enum.Font.Gotham,
        Text = config.Text or "",
        TextColor3 = currentTheme.TextDark,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    
    -- Progress bar
    local ProgressBar = Create("Frame", {
        Parent = Notification,
        BackgroundColor3 = currentTheme.Border,
        Position = UDim2.new(0, 0, 1, -4),
        Size = UDim2.new(1, 0, 0, 4)
    })
    
    local ProgressFill = Create("Frame", {
        Parent = ProgressBar,
        BackgroundColor3 = config.Color or currentTheme.Accent,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    -- Animate in
    Tween(Notification, {Position = UDim2.new(0, 0, 0, 0)}, 0.5, Enum.EasingStyle.Quart)
    
    -- Progress animation
    local duration = config.Duration or 3
    Tween(ProgressFill, {Size = UDim2.new(0, 0, 1, 0)}, duration, Enum.EasingStyle.Linear)
    
    wait(duration)
    
    -- Animate out
    Tween(Notification, {Position = UDim2.new(1, 100, 0, 0)}, 0.5, Enum.EasingStyle.Quart)
    wait(0.5)
    Notification:Destroy()
end

-- Window Class
local Window = {}
Window.__index = Window

function Library:CreateWindow(config)
    local self = setmetatable({}, Window)
    
    self.Title = config.Title or "Premium UI"
    self.Theme = Themes[config.Theme] or Themes.Dark
    self.AccentColor = config.AccentColor or self.Theme.Accent
    self.ToggleKey = config.ToggleKey or Enum.KeyCode.RightShift
    self.Tabs = {}
    self.CurrentTab = nil
    self.Minimized = false
    self.Settings = {
        BackgroundBlur = config.BackgroundBlur ~= false
    }
    
    -- Clear theme elements for new window
    ThemeElements = {}
    
    -- Create GUI
    self.ScreenGui = Create("ScreenGui", {
        Name = "UltimatePremiumUI",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        DisplayOrder = 10
    })
    
    -- Optional Blur Background
    if self.Settings.BackgroundBlur then
        self.BlurFrame = Create("Frame", {
            Name = "BlurEffect",
            Parent = self.ScreenGui,
            BackgroundColor3 = Color3.fromRGB(0, 0, 0),
            BackgroundTransparency = 0.7,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = -2
        })
    end
    
    -- Main Frame
    self.MainFrame = Create("Frame", {
        Name = "Main",
        Parent = self.ScreenGui,
        BackgroundColor3 = self.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -350, 0.5, -250),
        Size = UDim2.new(0, 700, 0, 500),
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = self.MainFrame
    })
    
    RegisterThemeElement(self.MainFrame, {BackgroundColor3 = "Background"})
    
    -- Shadow
    local Shadow = Create("ImageLabel", {
        Name = "Shadow",
        Parent = self.MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -25, 0, -25),
        Size = UDim2.new(1, 50, 1, 50),
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277),
        ZIndex = -1
    })
    
    -- Title Bar
    self.TitleBar = Create("Frame", {
        Name = "TitleBar",
        Parent = self.MainFrame,
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 45)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = self.TitleBar
    })
    
    Create("Frame", {
        Parent = self.TitleBar,
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0)
    })
    
    RegisterThemeElement(self.TitleBar, {BackgroundColor3 = "Secondary"})
    
    -- Title
    self.TitleLabel = Create("TextLabel", {
        Name = "Title",
        Parent = self.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = self.Title,
        TextColor3 = self.Theme.Text,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    RegisterThemeElement(self.TitleLabel, {TextColor3 = "Text"})
    
    -- Mac Style Control Buttons Container (perfectly centered)
    local Controls = Create("Frame", {
        Name = "Controls",
        Parent = self.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -76, 0.5, 0),
        Size = UDim2.new(0, 68, 0, 16),
        AnchorPoint = Vector2.new(0, 0.5)
    })
    
    -- Close Button (Red)
    local CloseButton = Create("TextButton", {
        Name = "Close",
        Parent = Controls,
        BackgroundColor3 = Color3.fromRGB(255, 95, 86),
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 16, 0, 16),
        Text = "",
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = CloseButton
    })
    
    -- Minimize Button (Yellow)
    local MinimizeButton = Create("TextButton", {
        Name = "Minimize",
        Parent = Controls,
        BackgroundColor3 = Color3.fromRGB(255, 189, 46),
        Position = UDim2.new(0, 26, 0, 0),
        Size = UDim2.new(0, 16, 0, 16),
        Text = "",
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = MinimizeButton
    })
    
    -- Maximize Button (Green)
    local MaximizeButton = Create("TextButton", {
        Name = "Maximize",
        Parent = Controls,
        BackgroundColor3 = Color3.fromRGB(39, 201, 63),
        Position = UDim2.new(0, 52, 0, 0),
        Size = UDim2.new(0, 16, 0, 16),
        Text = "",
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = MaximizeButton
    })
    
    -- Mac button hover effects
    local function AddMacButtonEffect(button)
        button.MouseEnter:Connect(function()
            Tween(button, {Size = UDim2.new(0, 18, 0, 18)}, 0.1)
        end)
        
        button.MouseLeave:Connect(function()
            Tween(button, {Size = UDim2.new(0, 16, 0, 16)}, 0.1)
        end)
        
        button.MouseButton1Down:Connect(function()
            Tween(button, {BackgroundTransparency = 0.3}, 0.1)
        end)
        
        button.MouseButton1Up:Connect(function()
            Tween(button, {BackgroundTransparency = 0}, 0.1)
        end)
    end
    
    AddMacButtonEffect(CloseButton)
    AddMacButtonEffect(MinimizeButton)
    AddMacButtonEffect(MaximizeButton)
    
    -- Button functions
    CloseButton.MouseButton1Click:Connect(function()
        Tween(self.MainFrame, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        wait(0.3)
        self:Destroy()
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        self.Minimized = not self.Minimized
        if self.Minimized then
            Tween(self.MainFrame, {Size = UDim2.new(0, 700, 0, 45)}, 0.3)
        else
            Tween(self.MainFrame, {Size = UDim2.new(0, 700, 0, 500)}, 0.3)
        end
    end)
    
    MaximizeButton.MouseButton1Click:Connect(function()
        if self.MainFrame.Size == UDim2.new(0, 700, 0, 500) then
            Tween(self.MainFrame, {
                Size = UDim2.new(0, 900, 0, 600),
                Position = UDim2.new(0.5, -450, 0.5, -300)
            }, 0.3)
        else
            Tween(self.MainFrame, {
                Size = UDim2.new(0, 700, 0, 500),
                Position = UDim2.new(0.5, -350, 0.5, -250)
            }, 0.3)
        end
    end)
    
    -- Tab Container with custom scrollbar
    self.TabContainer = Create("ScrollingFrame", {
        Name = "TabContainer",
        Parent = self.MainFrame,
        BackgroundColor3 = self.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 45),
        Size = UDim2.new(0, 170, 1, -45),
        ScrollBarThickness = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    
    RegisterThemeElement(self.TabContainer, {BackgroundColor3 = "Tertiary"})
    
    -- Custom scrollbar for tab container
    local TabScrollBar, TabScrollThumb = CreateScrollBar(self.TabContainer, self.Theme)
    
    Create("UIListLayout", {
        Parent = self.TabContainer,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    Create("UIPadding", {
        Parent = self.TabContainer,
        PaddingTop = UDim.new(0, 8),
        PaddingLeft = UDim.new(0, 8),
        PaddingRight = UDim.new(0, 8)
    })
    
    -- Content Container
    self.ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = self.MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 170, 0, 45),
        Size = UDim2.new(1, -170, 1, -45)
    })
    
    AddDraggability(self.MainFrame, self.TitleBar)
    
    -- Toggle visibility
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == self.ToggleKey then
            self.MainFrame.Visible = not self.MainFrame.Visible
        end
    end)
    
    -- Update custom scrollbar
    self.TabContainer:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        local canvasSize = self.TabContainer.CanvasSize.Y.Offset
        local viewportSize = self.TabContainer.AbsoluteSize.Y
        
        if canvasSize > viewportSize then
            TabScrollBar.Visible = true
            local thumbSize = (viewportSize / canvasSize) * viewportSize
            TabScrollThumb.Size = UDim2.new(1, 0, 0, math.max(thumbSize, 20))
            
            local scrollPercent = self.TabContainer.CanvasPosition.Y / (canvasSize - viewportSize)
            local thumbPosition = scrollPercent * (viewportSize - TabScrollThumb.AbsoluteSize.Y)
            TabScrollThumb.Position = UDim2.new(0, 0, 0, thumbPosition)
        else
            TabScrollBar.Visible = false
        end
    end)
    
    return self
end

function Window:CreateTab(name, icon)
    local Tab = {}
    Tab.Name = name
    Tab.Window = self
    Tab.Sections = {}
    
    -- Tab Button
    Tab.Button = Create("TextButton", {
        Name = name,
        Parent = self.TabContainer,
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -16, 0, 40),
        Font = Enum.Font.Gotham,
        Text = "",
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Tab.Button
    })
    
    RegisterThemeElement(Tab.Button, {BackgroundColor3 = "Secondary"})
    
    -- Tab content
    local TabContent = Create("Frame", {
        Name = "TabContent",
        Parent = Tab.Button,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    -- Tab icon
    if icon then
        Tab.Icon = Create("TextLabel", {
            Name = "Icon",
            Parent = TabContent,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, -10),
            Size = UDim2.new(0, 20, 0, 20),
            Font = Enum.Font.Gotham,
            Text = icon,
            TextColor3 = self.Theme.TextDark,
            TextSize = 18
        })
        
        RegisterThemeElement(Tab.Icon, {TextColor3 = "TextDark"})
    end
    
    -- Tab label
    Tab.Label = Create("TextLabel", {
        Name = "Label",
        Parent = TabContent,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, icon and 35 or 15, 0, 0),
        Size = UDim2.new(1, icon and -40 or -20, 1, 0),
        Font = Enum.Font.GothamMedium,
        Text = name,
        TextColor3 = self.Theme.TextDark,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    RegisterThemeElement(Tab.Label, {TextColor3 = "TextDark"})
    
    -- Selection indicator with rounded edges
    Tab.Indicator = Create("Frame", {
        Name = "Indicator",
        Parent = Tab.Button,
        BackgroundColor3 = self.AccentColor,
        Position = UDim2.new(0, 0, 0.1, 0),
        Size = UDim2.new(0, 3, 0.8, 0),
        Visible = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = Tab.Indicator
    })
    
    Tab.IndicatorElement = Tab.Indicator -- Store for theme updates
    
    -- Tab Content with custom scrollbar
    Tab.Content = Create("ScrollingFrame", {
        Name = name,
        Parent = self.ContentContainer,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Visible = false
    })
    
    -- Custom scrollbar for content
    local ContentScrollBar, ContentScrollThumb = CreateScrollBar(Tab.Content, self.Theme)
    
    Create("UIListLayout", {
        Parent = Tab.Content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 12)
    })
    
    Create("UIPadding", {
        Parent = Tab.Content,
        PaddingTop = UDim.new(0, 12),
        PaddingLeft = UDim.new(0, 12),
        PaddingRight = UDim.new(0, 12),
        PaddingBottom = UDim.new(0, 12)
    })
    
    -- Tab click
    Tab.Button.MouseButton1Click:Connect(function()
        self:SelectTab(Tab)
    end)
    
    -- Hover effects with proper theme color
    Tab.Button.MouseEnter:Connect(function()
        if self.CurrentTab ~= Tab then
            Tween(Tab.Button, {BackgroundColor3 = self.Theme.Quaternary}, 0.2)
        end
    end)
    
    Tab.Button.MouseLeave:Connect(function()
        if self.CurrentTab ~= Tab then
            Tween(Tab.Button, {BackgroundColor3 = self.Theme.Secondary}, 0.2)
        end
    end)
    
    -- Update content scrollbar
    Tab.Content:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        local canvasSize = Tab.Content.CanvasSize.Y.Offset
        local viewportSize = Tab.Content.AbsoluteSize.Y
        
        if canvasSize > viewportSize then
            ContentScrollBar.Visible = true
            local thumbSize = (viewportSize / canvasSize) * viewportSize
            ContentScrollThumb.Size = UDim2.new(1, 0, 0, math.max(thumbSize, 20))
            
            local scrollPercent = Tab.Content.CanvasPosition.Y / (canvasSize - viewportSize)
            local thumbPosition = scrollPercent * (viewportSize - ContentScrollThumb.AbsoluteSize.Y)
            ContentScrollThumb.Position = UDim2.new(0, 0, 0, thumbPosition)
        else
            ContentScrollBar.Visible = false
        end
    end)
    
    -- Auto-resize content
    Tab.Content:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        local layout = Tab.Content:FindFirstChildOfClass("UIListLayout")
        if layout then
            Tab.Content.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 24)
        end
    end)
    
    -- Section methods
    function Tab:CreateSection(name)
        local Section = {}
        Section.Name = name
        Section.Window = self.Window
        
        Section.Container = Create("Frame", {
            Name = name,
            Parent = Tab.Content,
            BackgroundColor3 = Section.Window.Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 45),
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 10),
            Parent = Section.Container
        })
        
        RegisterThemeElement(Section.Container, {BackgroundColor3 = "Secondary"})
        
        Section.Header = Create("Frame", {
            Name = "Header",
            Parent = Section.Container,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 40)
        })
        
        -- Section note line with rounded edges
        local NoteLine = Create("Frame", {
            Name = "NoteLine",
            Parent = Section.Header,
            BackgroundColor3 = Section.Window.Theme.Note,
            Position = UDim2.new(0, 8, 0.2, 0),
            Size = UDim2.new(0, 3, 0.6, 0)
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0.5, 0),
            Parent = NoteLine
        })
        
        -- Add gradient to note line
        Create("UIGradient", {
            Parent = NoteLine,
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                ColorSequenceKeypoint.new(0.5, Section.Window.Theme.Note),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
            },
            Rotation = 90
        })
        
        RegisterThemeElement(NoteLine, {BackgroundColor3 = "Note"})
        
        Section.Title = Create("TextLabel", {
            Name = "Title",
            Parent = Section.Header,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 20, 0, 0),
            Size = UDim2.new(1, -30, 1, 0),
            Font = Enum.Font.GothamBold,
            Text = name,
            TextColor3 = Section.Window.Theme.Text,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        RegisterThemeElement(Section.Title, {TextColor3 = "Text"})
        
        Section.Content = Create("Frame", {
            Name = "Content",
            Parent = Section.Container,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 40),
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
        Create("UIListLayout", {
            Parent = Section.Content,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        Create("UIPadding", {
            Parent = Section.Content,
            PaddingLeft = UDim.new(0, 15),
            PaddingRight = UDim.new(0, 15),
            PaddingBottom = UDim.new(0, 15)
        })
        
        -- Element creation methods
        function Section:CreateButton(config)
            local Button = Create("TextButton", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundColor3 = Section.Window.AccentColor,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Button
            })
            
            Button.AccentElement = Button -- Store for accent updates
            
            Button.MouseButton1Click:Connect(function()
                if config.Callback then
                    config.Callback()
                end
                
                -- Ripple effect
                local Ripple = Create("Frame", {
                    Parent = Button,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0.6,
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(0.5, 0.5)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0.5, 0),
                    Parent = Ripple
                })
                
                local expand = Tween(Ripple, {
                    Size = UDim2.new(1.5, 0, 1.5, 0),
                    BackgroundTransparency = 1
                }, 0.5)
                
                expand.Completed:Connect(function()
                    Ripple:Destroy()
                end)
            end)
            
            Button.MouseEnter:Connect(function()
                Tween(Button, {BackgroundColor3 = Section.Window.Theme.AccentDark}, 0.2)
            end)
            
            Button.MouseLeave:Connect(function()
                Tween(Button, {BackgroundColor3 = Section.Window.AccentColor}, 0.2)
            end)
            
            return Button
        end
        
        function Section:CreateToggle(config)
            local Toggle = {}
            Toggle.Value = config.Default or false
            
            Toggle.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Toggle.Background = Create("Frame", {
                Name = "Background",
                Parent = Toggle.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Toggle.Background
            })
            
            RegisterThemeElement(Toggle.Background, {BackgroundColor3 = "Quaternary"})
            
            Toggle.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Toggle.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(Toggle.Label, {TextColor3 = "Text"})
            
            Toggle.Switch = Create("Frame", {
                Name = "Switch",
                Parent = Toggle.Container,
                BackgroundColor3 = Section.Window.Theme.Border,
                Position = UDim2.new(1, -55, 0.5, -11),
                Size = UDim2.new(0, 44, 0, 22)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Toggle.Switch
            })
            
            RegisterThemeElement(Toggle.Switch, {BackgroundColor3 = "Border"})
            Toggle.SwitchAccent = Toggle.Switch -- Store for accent updates
            
            Toggle.Knob = Create("Frame", {
                Name = "Knob",
                Parent = Toggle.Switch,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Toggle.Knob
            })
            
            Create("UIStroke", {
                Parent = Toggle.Knob,
                Color = Section.Window.Theme.Border,
                Transparency = 0.7,
                Thickness = 1
            })
            
            local function UpdateToggle(instant)
                if Toggle.Value then
                    Tween(Toggle.Switch, {BackgroundColor3 = Section.Window.AccentColor}, instant and 0 or 0.2)
                    Tween(Toggle.Knob, {Position = UDim2.new(1, -20, 0.5, 0)}, instant and 0 or 0.2)
                else
                    Tween(Toggle.Switch, {BackgroundColor3 = Section.Window.Theme.Border}, instant and 0 or 0.2)
                    Tween(Toggle.Knob, {Position = UDim2.new(0, 2, 0.5, 0)}, instant and 0 or 0.2)
                end
                
                if config.Callback then
                    config.Callback(Toggle.Value)
                end
            end
            
            Toggle.Container.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Toggle.Value = not Toggle.Value
                    UpdateToggle()
                end
            end)
            
            Toggle.Container.MouseEnter:Connect(function()
                Tween(Toggle.Background, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
            end)
            
            Toggle.Container.MouseLeave:Connect(function()
                Tween(Toggle.Background, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
            end)
            
            UpdateToggle(true)
            Toggle.UpdateToggle = UpdateToggle
            
            return Toggle
        end
        
        function Section:CreateSlider(config)
            local Slider = {}
            Slider.Value = config.Default or config.Min
            
            Slider.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 55)
            })
            
            Slider.Background = Create("Frame", {
                Name = "Background",
                Parent = Slider.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Slider.Background
            })
            
            RegisterThemeElement(Slider.Background, {BackgroundColor3 = "Quaternary"})
            
            Slider.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Slider.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -70, 0, 20),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(Slider.Label, {TextColor3 = "Text"})
            
            Slider.ValueLabel = Create("TextLabel", {
                Name = "Value",
                Parent = Slider.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -55, 0, 5),
                Size = UDim2.new(0, 50, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = tostring(Slider.Value),
                TextColor3 = Section.Window.AccentColor,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            Slider.ValueAccent = Slider.ValueLabel -- Store for accent updates
            
            Slider.SliderBG = Create("Frame", {
                Name = "SliderBG",
                Parent = Slider.Container,
                BackgroundColor3 = Section.Window.Theme.Border,
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(1, -30, 0, 6)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Slider.SliderBG
            })
            
            RegisterThemeElement(Slider.SliderBG, {BackgroundColor3 = "Border"})
            
            Slider.Fill = Create("Frame", {
                Name = "Fill",
                Parent = Slider.SliderBG,
                BackgroundColor3 = Section.Window.AccentColor,
                Size = UDim2.new(0, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Slider.Fill
            })
            
            Slider.FillAccent = Slider.Fill -- Store for accent updates
            
            Slider.Knob = Create("Frame", {
                Name = "Knob",
                Parent = Slider.SliderBG,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, -8, 0.5, 0),
                Size = UDim2.new(0, 16, 0, 16),
                AnchorPoint = Vector2.new(0, 0.5),
                ZIndex = 2
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = Slider.Knob
            })
            
            -- Shadow for knob
            Create("UIStroke", {
                Parent = Slider.Knob,
                Color = Color3.fromRGB(0, 0, 0),
                Transparency = 0.8,
                Thickness = 2
            })
            
            local function UpdateSlider()
                local percent = (Slider.Value - config.Min) / (config.Max - config.Min)
                Slider.Fill.Size = UDim2.new(percent, 0, 1, 0)
                Slider.Knob.Position = UDim2.new(percent, -8, 0.5, 0)
                Slider.ValueLabel.Text = string.format(config.Format or "%d", Slider.Value)
                
                if config.Callback then
                    config.Callback(Slider.Value)
                end
            end
            
            local dragging = false
            
            Slider.SliderBG.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    Tween(Slider.Knob, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    Tween(Slider.Knob, {Size = UDim2.new(0, 16, 0, 16)}, 0.1)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = UserInputService:GetMouseLocation()
                    local relativePos = mousePos.X - Slider.SliderBG.AbsolutePosition.X
                    local percent = math.clamp(relativePos / Slider.SliderBG.AbsoluteSize.X, 0, 1)
                    
                    Slider.Value = config.Min + (config.Max - config.Min) * percent
                    
                    if config.Increment then
                        Slider.Value = math.floor(Slider.Value / config.Increment + 0.5) * config.Increment
                    end
                    
                    UpdateSlider()
                end
            end)
            
            UpdateSlider()
            
            return Slider
        end
        
        function Section:CreateDropdown(config)
            local Dropdown = {}
            Dropdown.Selected = config.Default or config.Options[1]
            Dropdown.Open = false
            
            Dropdown.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Dropdown.Button = Create("TextButton", {
                Name = "Button",
                Parent = Dropdown.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamMedium,
                Text = "",
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Dropdown.Button
            })
            
            RegisterThemeElement(Dropdown.Button, {BackgroundColor3 = "Quaternary"})
            
            Dropdown.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Dropdown.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name .. ": " .. Dropdown.Selected,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextTruncate = Enum.TextTruncate.AtEnd
            })
            
            RegisterThemeElement(Dropdown.Label, {TextColor3 = "Text"})
            
            Dropdown.Arrow = Create("TextLabel", {
                Name = "Arrow",
                Parent = Dropdown.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -35, 0.5, -8),
                Size = UDim2.new(0, 16, 0, 16),
                Font = Enum.Font.GothamBold,
                Text = "v",
                TextColor3 = Section.Window.Theme.TextDark,
                TextSize = 14
            })
            
            RegisterThemeElement(Dropdown.Arrow, {TextColor3 = "TextDark"})
            
            Dropdown.OptionContainer = Create("ScrollingFrame", {
                Name = "Options",
                Parent = Dropdown.Container,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 43),
                Size = UDim2.new(1, 0, 0, math.min(#config.Options * 35 + 10, 175)),
                Visible = false,
                ScrollBarThickness = 0,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ClipsDescendants = true
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Dropdown.OptionContainer
            })
            
            RegisterThemeElement(Dropdown.OptionContainer, {BackgroundColor3 = "Tertiary"})
            
            -- Custom scrollbar for dropdown
            local DropdownScrollBar, DropdownScrollThumb = CreateScrollBar(Dropdown.OptionContainer, Section.Window.Theme)
            
            Create("UIListLayout", {
                Parent = Dropdown.OptionContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 3)
            })
            
            Create("UIPadding", {
                Parent = Dropdown.OptionContainer,
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5),
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5)
            })
            
            -- Search box
            if config.Search then
                Dropdown.SearchBox = Create("TextBox", {
                    Name = "Search",
                    Parent = Dropdown.OptionContainer,
                    BackgroundColor3 = Section.Window.Theme.Secondary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 30),
                    Font = Enum.Font.Gotham,
                    PlaceholderText = "Search...",
                    PlaceholderColor3 = Section.Window.Theme.TextDark,
                    Text = "",
                    TextColor3 = Section.Window.Theme.Text,
                    TextSize = 13,
                    ClearTextOnFocus = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = Dropdown.SearchBox
                })
                
                Create("UIPadding", {
                    Parent = Dropdown.SearchBox,
                    PaddingLeft = UDim.new(0, 10)
                })
                
                RegisterThemeElement(Dropdown.SearchBox, {
                    BackgroundColor3 = "Secondary",
                    TextColor3 = "Text",
                    PlaceholderColor3 = "TextDark"
                })
            end
            
            for _, option in ipairs(config.Options) do
                local OptionButton = Create("TextButton", {
                    Name = option,
                    Parent = Dropdown.OptionContainer,
                    BackgroundColor3 = Section.Window.Theme.Secondary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 32),
                    Font = Enum.Font.Gotham,
                    Text = option,
                    TextColor3 = Section.Window.Theme.Text,
                    TextSize = 13,
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = OptionButton
                })
                
                RegisterThemeElement(OptionButton, {
                    BackgroundColor3 = "Secondary",
                    TextColor3 = "Text"
                })
                
                OptionButton.MouseButton1Click:Connect(function()
                    Dropdown.Selected = option
                    Dropdown.Label.Text = config.Name .. ": " .. option
                    Dropdown:Toggle()
                    
                    if config.Callback then
                        config.Callback(option)
                    end
                end)
                
                OptionButton.MouseEnter:Connect(function()
                    Tween(OptionButton, {
                        BackgroundColor3 = Section.Window.AccentColor,
                        BackgroundTransparency = 0.7
                    }, 0.1)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    Tween(OptionButton, {
                        BackgroundColor3 = Section.Window.Theme.Secondary,
                        BackgroundTransparency = 0
                    }, 0.1)
                end)
            end
            
            function Dropdown:Toggle()
                Dropdown.Open = not Dropdown.Open
                
                if Dropdown.Open then
                    Dropdown.OptionContainer.Visible = true
                    Dropdown.OptionContainer.Size = UDim2.new(1, 0, 0, 0)
                    Tween(Dropdown.OptionContainer, {
                        Size = UDim2.new(1, 0, 0, math.min(#config.Options * 35 + 10, 175))
                    }, 0.2)
                    Tween(Dropdown.Arrow, {Rotation = 180}, 0.2)
                    Tween(Dropdown.Button, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
                else
                    Tween(Dropdown.OptionContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                    Tween(Dropdown.Arrow, {Rotation = 0}, 0.2)
                    Tween(Dropdown.Button, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
                    wait(0.2)
                    Dropdown.OptionContainer.Visible = false
                end
            end
            
            Dropdown.Button.MouseButton1Click:Connect(function()
                Dropdown:Toggle()
            end)
            
            -- Update scrollbar
            Dropdown.OptionContainer:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
                local canvasSize = Dropdown.OptionContainer.CanvasSize.Y.Offset
                local viewportSize = Dropdown.OptionContainer.AbsoluteSize.Y
                
                if canvasSize > viewportSize then
                    DropdownScrollBar.Visible = true
                    local thumbSize = (viewportSize / canvasSize) * viewportSize
                    DropdownScrollThumb.Size = UDim2.new(1, 0, 0, math.max(thumbSize, 20))
                    
                    local scrollPercent = Dropdown.OptionContainer.CanvasPosition.Y / (canvasSize - viewportSize)
                    local thumbPosition = scrollPercent * (viewportSize - DropdownScrollThumb.AbsoluteSize.Y)
                    DropdownScrollThumb.Position = UDim2.new(0, 0, 0, thumbPosition)
                else
                    DropdownScrollBar.Visible = false
                end
            end)
            
            -- Auto-resize canvas
            Dropdown.OptionContainer:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
                local layout = Dropdown.OptionContainer:FindFirstChildOfClass("UIListLayout")
                if layout then
                    Dropdown.OptionContainer.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
                end
            end)
            
            -- Search functionality
            if Dropdown.SearchBox then
                Dropdown.SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
                    local search = Dropdown.SearchBox.Text:lower()
                    for _, child in pairs(Dropdown.OptionContainer:GetChildren()) do
                        if child:IsA("TextButton") and child ~= Dropdown.SearchBox then
                            child.Visible = child.Text:lower():find(search, 1, true) ~= nil
                        end
                    end
                end)
            end
            
            return Dropdown
        end
        
        function Section:CreateInput(config)
            local Input = {}
            
            Input.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Input.Background = Create("Frame", {
                Name = "Background",
                Parent = Input.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Input.Background
            })
            
            RegisterThemeElement(Input.Background, {BackgroundColor3 = "Quaternary"})
            
            Input.TextBox = Create("TextBox", {
                Name = "Input",
                Parent = Input.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.GothamMedium,
                PlaceholderText = config.PlaceholderText or config.Name,
                PlaceholderColor3 = Section.Window.Theme.TextDark,
                Text = config.Default or "",
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ClearTextOnFocus = config.ClearOnFocus ~= false
            })
            
            RegisterThemeElement(Input.TextBox, {
                TextColor3 = "Text",
                PlaceholderColor3 = "TextDark"
            })
            
            Input.TextBox.FocusLost:Connect(function(enterPressed)
                if config.Callback then
                    config.Callback(Input.TextBox.Text, enterPressed)
                end
            end)
            
            Input.TextBox.Focused:Connect(function()
                Tween(Input.Background, {BackgroundColor3 = Section.Window.Theme.Tertiary}, 0.2)
            end)
            
            Input.TextBox.FocusLost:Connect(function()
                Tween(Input.Background, {BackgroundColor3 = Section.Window.Theme.Quaternary}, 0.2)
            end)
            
            return Input
        end
        
        function Section:CreateLabel(text)
            local Label = Create("TextLabel", {
                Name = "Label",
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Section.Window.Theme.TextDark,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(Label, {TextColor3 = "TextDark"})
            
            return Label
        end
        
        function Section:CreateColorPicker(config)
            local ColorPicker = {}
            ColorPicker.Color = config.Default or Color3.fromRGB(255, 255, 255)
            ColorPicker.Open = false
            ColorPicker.Hue = 0
            ColorPicker.Saturation = 0
            ColorPicker.Value = 1
            ColorPicker.Alpha = 1
            
            -- Convert color to HSV
            local h, s, v = Color3.toHSV(ColorPicker.Color)
            ColorPicker.Hue = h
            ColorPicker.Saturation = s
            ColorPicker.Value = v
            
            ColorPicker.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            ColorPicker.Button = Create("Frame", {
                Name = "Button",
                Parent = ColorPicker.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = ColorPicker.Button
            })
            
            RegisterThemeElement(ColorPicker.Button, {BackgroundColor3 = "Quaternary"})
            
            ColorPicker.Label = Create("TextLabel", {
                Name = "Label",
                Parent = ColorPicker.Button,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -60, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(ColorPicker.Label, {TextColor3 = "Text"})
            
            ColorPicker.Display = Create("Frame", {
                Name = "Display",
                Parent = ColorPicker.Button,
                BackgroundColor3 = ColorPicker.Color,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -40, 0.5, -12),
                Size = UDim2.new(0, 24, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = ColorPicker.Display
            })
            
            Create("UIStroke", {
                Parent = ColorPicker.Display,
                Color = Section.Window.Theme.Border,
                Thickness = 2
            })
            
            -- Color Picker Panel (perfectly square and centered)
            ColorPicker.PickerFrame = Create("Frame", {
                Name = "Picker",
                Parent = Section.Window.ScreenGui,
                BackgroundColor3 = Section.Window.Theme.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(0, 280, 0, 320), -- Perfect size
                Visible = false,
                ZIndex = 100
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 10),
                Parent = ColorPicker.PickerFrame
            })
            
            RegisterThemeElement(ColorPicker.PickerFrame, {BackgroundColor3 = "Secondary"})
            
            -- Shadow for picker
            local PickerShadow = Create("ImageLabel", {
                Name = "Shadow",
                Parent = ColorPicker.PickerFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, -15, 0, -15),
                Size = UDim2.new(1, 30, 1, 30),
                Image = "rbxassetid://5554236805",
                ImageColor3 = Color3.fromRGB(0, 0, 0),
                ImageTransparency = 0.7,
                ScaleType = Enum.ScaleType.Slice,
                SliceCenter = Rect.new(23, 23, 277, 277),
                ZIndex = 99
            })
            
            -- Title Bar for dragging
            local PickerTitle = Create("Frame", {
                Name = "TitleBar",
                Parent = ColorPicker.PickerFrame,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                Size = UDim2.new(1, 0, 0, 30)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 10),
                Parent = PickerTitle
            })
            
            Create("Frame", {
                Parent = PickerTitle,
                BackgroundColor3 = Section.Window.Theme.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(1, 0, 0.5, 0)
            })
            
            RegisterThemeElement(PickerTitle, {BackgroundColor3 = "Tertiary"})
            
            local PickerTitleText = Create("TextLabel", {
                Parent = PickerTitle,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = "Color Picker",
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(PickerTitleText, {TextColor3 = "Text"})
            
            -- Add draggability to color picker
            AddDraggability(ColorPicker.PickerFrame, PickerTitle)
            
            -- Color Wheel (perfect square)
            ColorPicker.Wheel = Create("ImageLabel", {
                Name = "ColorWheel",
                Parent = ColorPicker.PickerFrame,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Position = UDim2.new(0.5, 0, 0, 40),
                Size = UDim2.new(0, 180, 0, 180), -- Perfect square
                Image = "rbxassetid://6020299385",
                AnchorPoint = Vector2.new(0.5, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = ColorPicker.Wheel
            })
            
            -- Wheel Cursor
            ColorPicker.WheelCursor = Create("Frame", {
                Name = "Cursor",
                Parent = ColorPicker.Wheel,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Size = UDim2.new(0, 10, 0, 10),
                Position = UDim2.new(0.5, 0, 0.5, 0),
                AnchorPoint = Vector2.new(0.5, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = ColorPicker.WheelCursor
            })
            
            Create("UIStroke", {
                Parent = ColorPicker.WheelCursor,
                Color = Color3.fromRGB(0, 0, 0),
                Thickness = 2
            })
            
            -- Brightness Slider
            local BrightnessLabel = Create("TextLabel", {
                Parent = ColorPicker.PickerFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 230),
                Size = UDim2.new(0, 60, 0, 20),
                Font = Enum.Font.Gotham,
                Text = "Brightness",
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(BrightnessLabel, {TextColor3 = "Text"})
            
            ColorPicker.BrightnessSlider = Create("Frame", {
                Name = "BrightnessSlider",
                Parent = ColorPicker.PickerFrame,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, 10, 0, 255),
                Size = UDim2.new(1, -20, 0, 10)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = ColorPicker.BrightnessSlider
            })
            
            Create("UIGradient", {
                Parent = ColorPicker.BrightnessSlider,
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }
            })
            
            ColorPicker.BrightnessKnob = Create("Frame", {
                Name = "Knob",
                Parent = ColorPicker.BrightnessSlider,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(1, -8, 0.5, 0),
                Size = UDim2.new(0, 16, 0, 16),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = ColorPicker.BrightnessKnob
            })
            
            Create("UIStroke", {
                Parent = ColorPicker.BrightnessKnob,
                Color = Color3.fromRGB(0, 0, 0),
                Thickness = 2
            })
            
            -- Alpha Slider
            local AlphaLabel = Create("TextLabel", {
                Parent = ColorPicker.PickerFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 275),
                Size = UDim2.new(0, 60, 0, 20),
                Font = Enum.Font.Gotham,
                Text = "Alpha",
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(AlphaLabel, {TextColor3 = "Text"})
            
            ColorPicker.AlphaSlider = Create("Frame", {
                Name = "AlphaSlider",
                Parent = ColorPicker.PickerFrame,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, 10, 0, 300),
                Size = UDim2.new(1, -20, 0, 10)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = ColorPicker.AlphaSlider
            })
            
            -- Checkered background for alpha
            local CheckerPattern = Create("ImageLabel", {
                Parent = ColorPicker.AlphaSlider,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Image = "rbxassetid://3192481976",
                ScaleType = Enum.ScaleType.Tile,
                TileSize = UDim2.new(0, 10, 0, 10)
            })
            
            local AlphaGradient = Create("Frame", {
                Parent = ColorPicker.AlphaSlider,
                BackgroundColor3 = ColorPicker.Color,
                Size = UDim2.new(1, 0, 1, 0),
                BorderSizePixel = 0
            })
            
            Create("UIGradient", {
                Parent = AlphaGradient,
                Transparency = NumberSequence.new{
                    NumberSequenceKeypoint.new(0, 1),
                    NumberSequenceKeypoint.new(1, 0)
                }
            })
            
            ColorPicker.AlphaKnob = Create("Frame", {
                Name = "Knob",
                Parent = ColorPicker.AlphaSlider,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(1, -8, 0.5, 0),
                Size = UDim2.new(0, 16, 0, 16),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = ColorPicker.AlphaKnob
            })
            
            Create("UIStroke", {
                Parent = ColorPicker.AlphaKnob,
                Color = Color3.fromRGB(0, 0, 0),
                Thickness = 2
            })
            
            -- Functions
            local function UpdateColor()
                ColorPicker.Color = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Saturation, ColorPicker.Value)
                ColorPicker.Display.BackgroundColor3 = ColorPicker.Color
                AlphaGradient.BackgroundColor3 = ColorPicker.Color
                
                if config.Callback then
                    config.Callback(ColorPicker.Color, ColorPicker.Alpha)
                end
            end
            
            local function UpdateWheelCursor()
                local angle = ColorPicker.Hue * math.pi * 2
                local radius = ColorPicker.Saturation * (ColorPicker.Wheel.AbsoluteSize.X / 2 - 10)
                local x = math.cos(angle) * radius
                local y = math.sin(angle) * radius
                
                ColorPicker.WheelCursor.Position = UDim2.new(0.5, x, 0.5, y)
            end
            
            -- Wheel interaction
            local wheelDragging = false
            
            ColorPicker.Wheel.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    wheelDragging = true
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    wheelDragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if wheelDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = UserInputService:GetMouseLocation()
                    local wheelCenter = ColorPicker.Wheel.AbsolutePosition + ColorPicker.Wheel.AbsoluteSize / 2
                    local delta = mousePos - wheelCenter
                    
                    local angle = math.atan2(delta.Y, delta.X)
                    local distance = math.min((delta.X^2 + delta.Y^2)^0.5, ColorPicker.Wheel.AbsoluteSize.X / 2)
                    
                    ColorPicker.Hue = (angle / (math.pi * 2)) % 1
                    ColorPicker.Saturation = distance / (ColorPicker.Wheel.AbsoluteSize.X / 2)
                    
                    UpdateWheelCursor()
                    UpdateColor()
                end
            end)
            
            -- Brightness slider interaction
            local brightnessDragging = false
            
            ColorPicker.BrightnessSlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    brightnessDragging = true
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    brightnessDragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if brightnessDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = UserInputService:GetMouseLocation()
                    local relativePos = mousePos.X - ColorPicker.BrightnessSlider.AbsolutePosition.X
                    local percent = math.clamp(relativePos / ColorPicker.BrightnessSlider.AbsoluteSize.X, 0, 1)
                    
                    ColorPicker.Value = percent
                    ColorPicker.BrightnessKnob.Position = UDim2.new(percent, -8, 0.5, 0)
                    UpdateColor()
                end
            end)
            
            -- Alpha slider interaction
            local alphaDragging = false
            
            ColorPicker.AlphaSlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    alphaDragging = true
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    alphaDragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if alphaDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = UserInputService:GetMouseLocation()
                    local relativePos = mousePos.X - ColorPicker.AlphaSlider.AbsolutePosition.X
                    local percent = math.clamp(relativePos / ColorPicker.AlphaSlider.AbsoluteSize.X, 0, 1)
                    
                    ColorPicker.Alpha = percent
                    ColorPicker.AlphaKnob.Position = UDim2.new(percent, -8, 0.5, 0)
                    UpdateColor()
                end
            end)
            
            -- Toggle picker
            ColorPicker.Button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    ColorPicker.Open = not ColorPicker.Open
                    
                    if ColorPicker.Open then
                        -- Position picker to the right of the button
                        local buttonPos = ColorPicker.Button.AbsolutePosition
                        local buttonSize = ColorPicker.Button.AbsoluteSize
                        local pickerSize = ColorPicker.PickerFrame.AbsoluteSize
                        local screenSize = workspace.CurrentCamera.ViewportSize
                        
                        local x = buttonPos.X + buttonSize.X + 10
                        local y = buttonPos.Y - (pickerSize.Y - buttonSize.Y) / 2
                        
                        -- Check if picker would go off-screen
                        if x + pickerSize.X > screenSize.X then
                            x = buttonPos.X - pickerSize.X - 10
                        end
                        
                        if y < 0 then
                            y = 10
                        elseif y + pickerSize.Y > screenSize.Y then
                            y = screenSize.Y - pickerSize.Y - 10
                        end
                        
                        ColorPicker.PickerFrame.Position = UDim2.new(0, x, 0, y)
                        ColorPicker.PickerFrame.Visible = true
                        
                        -- Fade in animation
                        ColorPicker.PickerFrame.BackgroundTransparency = 1
                        Tween(ColorPicker.PickerFrame, {BackgroundTransparency = 0}, 0.2)
                        
                        UpdateWheelCursor()
                        ColorPicker.BrightnessKnob.Position = UDim2.new(ColorPicker.Value, -8, 0.5, 0)
                        ColorPicker.AlphaKnob.Position = UDim2.new(ColorPicker.Alpha, -8, 0.5, 0)
                    else
                        -- Fade out animation
                        Tween(ColorPicker.PickerFrame, {BackgroundTransparency = 1}, 0.2)
                        wait(0.2)
                        ColorPicker.PickerFrame.Visible = false
                    end
                end
            end)
            
            -- Close button
            local CloseButton = Create("TextButton", {
                Parent = PickerTitle,
                BackgroundColor3 = Color3.fromRGB(255, 95, 86),
                Position = UDim2.new(1, -25, 0.5, -7),
                Size = UDim2.new(0, 14, 0, 14),
                Text = "",
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0.5, 0),
                Parent = CloseButton
            })
            
            CloseButton.MouseButton1Click:Connect(function()
                ColorPicker.Open = false
                Tween(ColorPicker.PickerFrame, {BackgroundTransparency = 1}, 0.2)
                wait(0.2)
                ColorPicker.PickerFrame.Visible = false
            end)
            
            UpdateColor()
            
            return ColorPicker
        end
        
        function Section:CreateKeybind(config)
            local Keybind = {}
            Keybind.Key = config.Default or Enum.KeyCode.F
            Keybind.Listening = false
            
            Keybind.Container = Create("Frame", {
                Name = config.Name,
                Parent = Section.Content,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            Keybind.Background = Create("Frame", {
                Name = "Background",
                Parent = Keybind.Container,
                BackgroundColor3 = Section.Window.Theme.Quaternary,
                Size = UDim2.new(1, 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Keybind.Background
            })
            
            RegisterThemeElement(Keybind.Background, {BackgroundColor3 = "Quaternary"})
            
            Keybind.Label = Create("TextLabel", {
                Name = "Label",
                Parent = Keybind.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -100, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            RegisterThemeElement(Keybind.Label, {TextColor3 = "Text"})
            
            Keybind.Button = Create("TextButton", {
                Name = "Keybind",
                Parent = Keybind.Container,
                BackgroundColor3 = Section.Window.Theme.Border,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -85, 0.5, -14),
                Size = UDim2.new(0, 70, 0, 28),
                Font = Enum.Font.GothamMedium,
                Text = Keybind.Key.Name,
                TextColor3 = Section.Window.Theme.Text,
                TextSize = 13,
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Keybind.Button
            })
            
            RegisterThemeElement(Keybind.Button, {
                BackgroundColor3 = "Border",
                TextColor3 = "Text"
            })
            
            Keybind.Button.MouseButton1Click:Connect(function()
                Keybind.Listening = true
                Keybind.Button.Text = "..."
                Tween(Keybind.Button, {BackgroundColor3 = Section.Window.AccentColor}, 0.2)
            end)
            
            UserInputService.InputBegan:Connect(function(input)
                if Keybind.Listening and input.UserInputType == Enum.UserInputType.Keyboard then
                    Keybind.Key = input.KeyCode
                    Keybind.Button.Text = Keybind.Key.Name
                    Keybind.Listening = false
                    Tween(Keybind.Button, {BackgroundColor3 = Section.Window.Theme.Border}, 0.2)
                    
                    if config.Callback then
                        config.Callback(Keybind.Key)
                    end
                elseif not Keybind.Listening and input.KeyCode == Keybind.Key then
                    if config.Callback then
                        config.Callback(Keybind.Key)
                    end
                end
            end)
            
            return Keybind
        end
        
        table.insert(Tab.Sections, Section)
        return Section
    end
    
    table.insert(self.Tabs, Tab)
    
    -- Select first tab by default
    if #self.Tabs == 1 then
        self:SelectTab(Tab)
    end
    
    return Tab
end

function Window:SelectTab(tab)
    -- Hide all tabs
    for _, t in ipairs(self.Tabs) do
        t.Content.Visible = false
        t.Indicator.Visible = false
        Tween(t.Button, {BackgroundColor3 = self.Theme.Secondary}, 0.2)
        Tween(t.Label, {TextColor3 = self.Theme.TextDark}, 0.2)
        if t.Icon then
            Tween(t.Icon, {TextColor3 = self.Theme.TextDark}, 0.2)
        end
    end
    
    -- Show selected tab
    tab.Content.Visible = true
    tab.Indicator.Visible = true
    self.CurrentTab = tab
    Tween(tab.Button, {BackgroundColor3 = self.Theme.Quaternary}, 0.2)
    Tween(tab.Label, {TextColor3 = self.AccentColor}, 0.2)
    if tab.Icon then
        Tween(tab.Icon, {TextColor3 = self.AccentColor}, 0.2)
    end
end

function Window:SetTheme(themeName)
    local theme = Themes[themeName]
    if theme then
        self.Theme = theme
        
        -- Update all registered theme elements
        for _, element in ipairs(ThemeElements) do
            if element.element and element.element.Parent then
                for property, themeKey in pairs(element.properties) do
                    if theme[themeKey] then
                        Tween(element.element, {[property] = theme[themeKey]}, 0.3)
                    end
                end
            end
        end
        
        -- Update accent-specific elements
        self:UpdateAccentElements()
    end
end

function Window:UpdateAccentElements()
    -- Update all elements that use accent color
    for _, tab in ipairs(self.Tabs) do
        if self.CurrentTab == tab then
            tab.Indicator.BackgroundColor3 = self.AccentColor
            tab.Label.TextColor3 = self.AccentColor
            if tab.Icon then
                tab.Icon.TextColor3 = self.AccentColor
            end
        end
        
        for _, section in ipairs(tab.Sections) do
            -- Update buttons
            for _, child in pairs(section.Content:GetChildren()) do
                if child.Name and child.AccentElement then
                    child.BackgroundColor3 = self.AccentColor
                end
                
                -- Update toggles
                if child.Name and child:FindFirstChild("Switch") and child.SwitchAccent then
                    local toggle = child
                    if toggle.Value then
                        toggle.Switch.BackgroundColor3 = self.AccentColor
                    end
                end
                
                -- Update sliders
                if child.Name and child.FillAccent then
                    child.Fill.BackgroundColor3 = self.AccentColor
                    child.ValueLabel.TextColor3 = self.AccentColor
                end
            end
        end
    end
end

function Window:ToggleRainbow(enabled)
    if enabled then
        self.RainbowConnection = RunService.Heartbeat:Connect(function()
            local hue = tick() % 5 / 5
            local color = Color3.fromHSV(hue, 1, 1)
            self.AccentColor = color
            
            -- Update all accent elements
            self:UpdateAccentElements()
        end)
    else
        if self.RainbowConnection then
            self.RainbowConnection:Disconnect()
            self.RainbowConnection = nil
            -- Reset to theme accent
            self.AccentColor = self.Theme.Accent
            self:UpdateAccentElements()
        end
    end
end

function Window:SetAccentColor(color)
    self.AccentColor = color
    self:UpdateAccentElements()
end

function Window:ToggleBlur(enabled)
    if self.BlurFrame then
        self.BlurFrame.Visible = enabled
    end
end

function Window:Reset()
    Tween(self.MainFrame, {
        Position = UDim2.new(0.5, -350, 0.5, -250),
        Size = UDim2.new(0, 700, 0, 500)
    }, 0.3)
end

function Window:Destroy()
    if self.RainbowConnection then
        self.RainbowConnection:Disconnect()
    end
    self.ScreenGui:Destroy()
end

function Window:Init()
    -- Opening animation
    self.MainFrame.Size = UDim2.new(0, 0, 0, 0)
    self.MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    Tween(self.MainFrame, {
        Size = UDim2.new(0, 700, 0, 500),
        Position = UDim2.new(0.5, -350, 0.5, -250)
    }, 0.5, Enum.EasingStyle.Back)
end

return Library
